Index: app/src/main/java/de/codingkeks/shoppinglist/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.codingkeks.shoppinglist\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.android.material.navigation.NavigationView\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport com.firebase.ui.auth.AuthUI\r\nimport com.firebase.ui.auth.IdpResponse\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport kotlinx.android.synthetic.main.app_bar_main.*\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private val RC_AUTH = 20\r\n    private val TAG = \"shoppinglist_1234abcd\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val toolbar: Toolbar = findViewById(R.id.toolbar)\r\n        setSupportActionBar(toolbar)\r\n\r\n        val fab: FloatingActionButton = findViewById(R.id.fab)\r\n        fab.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = findViewById(R.id.drawer_layout)\r\n        val navView: NavigationView = findViewById(R.id.nav_view)\r\n        val navController = findNavController(R.id.nav_host_fragment)\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow\r\n            ), drawerLayout\r\n        )\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n        val fb = FirebaseAuth.getInstance()\r\n        if (fb.currentUser == null)\r\n            login()\r\n        else {\r\n            Log.d(TAG, fb.currentUser!!.email.toString())\r\n        }\r\n\r\n        buLogout.setOnClickListener {\r\n            AuthUI.getInstance()\r\n                .signOut(this)\r\n                .addOnCompleteListener {\r\n                    Log.d(TAG, \"User has been deleted\")\r\n                }\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.main, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n\r\n    override fun onStart() {\r\n        Log.d(TAG, \"onStart_Start\")\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        Log.d(TAG, \"onActivityResult_Start\")\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (requestCode == RC_AUTH) {\r\n            val response = IdpResponse.fromResultIntent(data)\r\n\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                // Successfully signed in\r\n                val user = FirebaseAuth.getInstance().currentUser\r\n                println(user?.email)\r\n                Log.d(TAG, user?.email.toString())\r\n                // ...\r\n            } else {\r\n                // Sign in failed. If response is null the user canceled the\r\n                // sign-in flow using the back button. Otherwise check\r\n                // response.getError().getErrorCode() and handle the error.\r\n                // ...\r\n            }\r\n        }\r\n        Log.d(TAG, \"onActivityResult_End\")\r\n    }\r\n\r\n    private fun login() {\r\n        //authentication providers\r\n        val providers = arrayListOf(\r\n            AuthUI.IdpConfig.EmailBuilder().build(),\r\n            AuthUI.IdpConfig.GoogleBuilder().build()\r\n        )\r\n        Log.d(TAG, \"startActivityForResult_Pre\")\r\n        startActivityForResult(\r\n            AuthUI.getInstance()\r\n                .createSignInIntentBuilder()\r\n                .setAvailableProviders(providers)\r\n                .build(),\r\n            RC_AUTH\r\n        )\r\n        Log.d(TAG, \"startActivityForResult_Post\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/codingkeks/shoppinglist/MainActivity.kt	(revision b931b8c4aec1c91f145965d0f5eb0dc31921ef1e)
+++ app/src/main/java/de/codingkeks/shoppinglist/MainActivity.kt	(date 1603468798898)
@@ -62,7 +62,7 @@
             AuthUI.getInstance()
                 .signOut(this)
                 .addOnCompleteListener {
-                    Log.d(TAG, "User has been deleted")
+                    Log.d(TAG, "User has been logged out")
                 }
         }
     }
